[{"/Users/ilemionline/Documents/projects/react/musicPlayer/src/index.js":"1","/Users/ilemionline/Documents/projects/react/musicPlayer/src/App.js":"2","/Users/ilemionline/Documents/projects/react/musicPlayer/src/reportWebVitals.js":"3","/Users/ilemionline/Documents/projects/react/musicPlayer/src/util.js":"4","/Users/ilemionline/Documents/projects/react/musicPlayer/src/components/index.js":"5","/Users/ilemionline/Documents/projects/react/musicPlayer/src/components/player/Player.js":"6","/Users/ilemionline/Documents/projects/react/musicPlayer/src/components/player/Song.js":"7","/Users/ilemionline/Documents/projects/react/musicPlayer/src/components/songsLibrary/Library.js":"8","/Users/ilemionline/Documents/projects/react/musicPlayer/src/components/songsLibrary/Nav.js":"9","/Users/ilemionline/Documents/projects/react/musicPlayer/src/components/songsLibrary/LibrarySong.js":"10"},{"size":478,"mtime":1611364467000,"results":"11","hashOfConfig":"12"},{"size":1712,"mtime":1611419988000,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1611364467000,"results":"14","hashOfConfig":"12"},{"size":2410,"mtime":1611364467000,"results":"15","hashOfConfig":"12"},{"size":710,"mtime":1611364467000,"results":"16","hashOfConfig":"12"},{"size":5173,"mtime":1611420471000,"results":"17","hashOfConfig":"12"},{"size":877,"mtime":1611420205000,"results":"18","hashOfConfig":"12"},{"size":1663,"mtime":1611420581000,"results":"19","hashOfConfig":"12"},{"size":973,"mtime":1611364467000,"results":"20","hashOfConfig":"12"},{"size":1281,"mtime":1611420745000,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1opo2nq",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ilemionline/Documents/projects/react/musicPlayer/src/index.js",[],["46","47"],"/Users/ilemionline/Documents/projects/react/musicPlayer/src/App.js",["48"],"/* ==========================================================================\n** Music Player Main Component\n** 29/12/2020\n** Alan Medina Silva\n** ========================================================================== */\n\n// --------------------------------------\n// Imports\n// --------------------------------------\n  import { useState, useRef } from 'react';  \n  import {Player, Song, Library, Nav } from './components';\n  import data from \"./util\";\n  import \"./styles/app.scss\";\n\n  \n  // import './app.scss';\n\n// --------------------------------------\n// Create Component\n// --------------------------------------\n  function App() {\n\n\n    // ?--------------------------------------\n    // ? Add State\n    // ?--------------------------------------\n    const [songs, setSongs] = useState(data());\n    const [currentSong, setCurrentSong] = useState(songs[0]);\n    const [isPlaying, setIsPlaying] = useState(false);\n    const audioRef = useRef(null);\n    const [libraryStatus, setLibraryStatus] = useState(false);\n\n    return (\n      <div className={`App ${libraryStatus ? 'library-active' : ''}`}>\n        <Nav libraryStatus = {libraryStatus} setLibraryStatus = {setLibraryStatus}/>\n        <Song currentSong = {currentSong} />\n        <Player currentSong = {currentSong} isPlaying = {isPlaying} setIsPlaying = {setIsPlaying} audioRef = {audioRef} songs={songs} setCurrentSong = {setCurrentSong} />\n        <Library library =  {songs} setCurrentSong = {setCurrentSong} audioRef = {audioRef} activeSong = {currentSong.id} libraryStatus = {libraryStatus} />\n      </div>\n    );\n  }\n\n// --------------------------------------\n// Export Component\n// --------------------------------------\n  export default App;\n","/Users/ilemionline/Documents/projects/react/musicPlayer/src/reportWebVitals.js",[],"/Users/ilemionline/Documents/projects/react/musicPlayer/src/util.js",[],"/Users/ilemionline/Documents/projects/react/musicPlayer/src/components/index.js",[],"/Users/ilemionline/Documents/projects/react/musicPlayer/src/components/player/Player.js",["49"],"/* ==========================================================================\n** Player Controls Component\n** 29/12/2020\n** Alan Medina Silva\n** ========================================================================== */\n\n\n// --------------------------------------\n// Imports\n// --------------------------------------\n    import React, {useState, useEffect} from 'react';\n    import {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n    import {faPlay, faAngleLeft, faAngleRight, faPause} from \"@fortawesome/free-solid-svg-icons\"\n\n// --------------------------------------\n// Create Component\n// --------------------------------------\n    const Player = ({currentSong, isPlaying, setIsPlaying, audioRef, songs, setCurrentSong}) => {\n\n        const {audio} = currentSong;\n        \n\n        // ?--------------------------------------\n        // ? Handle State\n        // ?--------------------------------------\n\n            const [songInfo, setSongInfo] = useState({\n                currentTime : 0,\n                duration: null,\n                animationPercentage:0\n            });\n\n            useEffect(() => {\n                \n                if(isPlaying && audioRef.current.paused) {\n                    audioRef.current.play();\n                    setIsPlaying(!isPlaying); \n                }else if(!audioRef.current.paused)\n                    setIsPlaying(true);\n                    \n                // return () => {\n                //     console.log(\"ðŸš€ ~ file: Player.js ~ line 38 ~ return ~ cleanup\");\n                // }\n                    \n            }, [isPlaying, currentSong, audioRef])\n            \n        \n        // ?--------------------------------------\n        // ? Event Handlers\n        // ?--------------------------------------\n            const playSongHandler = (event) => {\n                isPlaying === false ?audioRef.current.play() : audioRef.current.pause();\n                setIsPlaying(!isPlaying);\n            }\n\n            //? Update song Timers\n            const timeUpdateHandler = (event) => {\n                const currentTime = event.target.currentTime;\n                const duration = event.target.duration || 0;\n                // calculate percentage\n                const roundedCurrent = Math.round(currentTime);\n                const animationPercentage = Math.round((roundedCurrent / duration) * 100)\n                setSongInfo({...songInfo, currentTime, duration, animationPercentage})\n            }\n\n        \n            //? Format Song Timers\n            const formatTime = (time) => {\n                if(time !== null || !isNaN(time) )\n                    return `${Math.floor(time/60)} : ${Math.floor(time % 60)}`\n                return '';\n            }\n\n            const dragHandler = (event) => {\n                audioRef.current.currentTime = event.target.value;\n                setSongInfo({...songInfo, currentTime : event.target.value})\n            }\n\n            const skipTrackHandler = (direction) => {\n                const currentIndex = songs.findIndex((song) => song.id === currentSong.id );\n                if(direction === 'skip-backward')\n                    currentIndex === 0? setCurrentSong(songs[songs.length-1]) : setCurrentSong(songs[currentIndex-1])\n                else\n                    currentIndex === songs.length -1 ? setCurrentSong(songs[0]) : setCurrentSong(songs[currentIndex+1])\n            }\n\n            \n\n\n\n        // ?--------------------------------------\n        // ? Render Component\n        // ?--------------------------------------\n        return(\n            <div className=\"playerContainer\"> \n                <div className=\"timeControl\">\n                    <p>{formatTime(songInfo.currentTime)}</p>\n                    <div className=\"track\" style= {{background : `linear-gradient(to right, ${currentSong.color[0]}, ${currentSong.color[1]})`}}>\n                        <input type=\"range\" name=\"range\" id=\"range\" min = {0} max = {songInfo.duration} value = {songInfo.currentTime} onChange = {dragHandler}/>\n                        <div className=\"animateTrack\" style= {{transform : `translateX(${songInfo.animationPercentage}%)`}}></div>\n                    </div>\n                    \n                    <p>{formatTime(songInfo.duration)}</p>\n                </div>\n\n                <div className=\"playControl\">\n                    <FontAwesomeIcon  className = \"back\"  size=\"2x\" icon = {faAngleLeft} onClick =  {()=>skipTrackHandler('skip-backward')}/>\n                    <FontAwesomeIcon  onClick = {playSongHandler} className = \"play\"  size=\"2x\" icon = {isPlaying ? faPause : faPlay } />\n                    <FontAwesomeIcon  className = \"forward\"  size=\"2x\" icon = {faAngleRight}  onClick =  {()=>skipTrackHandler('skip-forward')}/>\n                </div>\n\n                 <audio ref= {audioRef && audioRef} src = {audio} onTimeUpdate = {timeUpdateHandler} onLoadedMetadata = {timeUpdateHandler} onEnded = {()=>skipTrackHandler('skip-forward')}></audio>\n\n            </div>\n        )\n\n    }\n\n// --------------------------------------\n// Export Component\n// --------------------------------------\n    export default Player;\n","/Users/ilemionline/Documents/projects/react/musicPlayer/src/components/player/Song.js",["50"],"/* ==========================================================================\n** Song Component\n** 29/12/2020\n** Alan Medina Silva\n** ========================================================================== */\n\n\n// --------------------------------------\n// Imports\n// --------------------------------------\n    import React from 'react';\n\n// --------------------------------------\n// Create Component\n// --------------------------------------\n    const Song = ({currentSong}) => {\n\n        const {cover, name, artist, album} = currentSong;\n\n        return(\n            <div className=\"songContainer\">\n               <img src={cover} alt={name}/>\n                <h2> {name} </h2>\n                <h4> {artist}</h4>\n             </div>\n        )\n\n    }\n\n// --------------------------------------\n// Export Component\n// --------------------------------------\n    export default Song;\n","/Users/ilemionline/Documents/projects/react/musicPlayer/src/components/songsLibrary/Library.js",[],"/Users/ilemionline/Documents/projects/react/musicPlayer/src/components/songsLibrary/Nav.js",[],"/Users/ilemionline/Documents/projects/react/musicPlayer/src/components/songsLibrary/LibrarySong.js",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":27,"column":19,"nodeType":"57","messageId":"58","endLine":27,"endColumn":27},{"ruleId":"59","severity":1,"message":"60","line":45,"column":16,"nodeType":"61","endLine":45,"endColumn":50,"suggestions":"62"},{"ruleId":"55","severity":1,"message":"63","line":18,"column":37,"nodeType":"57","messageId":"58","endLine":18,"endColumn":42},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],"no-unused-vars","'setSongs' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setIsPlaying'. Either include it or remove the dependency array. If 'setIsPlaying' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["66"],"'album' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"67","fix":"68"},"Update the dependencies array to be: [isPlaying, currentSong, audioRef, setIsPlaying]",{"range":"69","text":"70"},[1584,1618],"[isPlaying, currentSong, audioRef, setIsPlaying]"]